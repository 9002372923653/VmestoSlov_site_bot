import json
import requests
import re
import os
from openai import OpenAI
from prompts import formatter_prompt, assistant_instructions

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AIRTABLE_API_KEY = os.getenv("AIRTABLE_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

if not AIRTABLE_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AIRTABLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Airtable
AIRTABLE_BASE_ID = "appVoeCexAh2D0WmI"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Base ID
AIRTABLE_TABLE_NAME = "Table 1"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

# üÜï –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_contact_data(data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–∏–ø —É—Å–ª—É–≥–∏ –∏ —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    
    name_pattern = r"[–ê-–Ø–∞-—èA-Za-z]+(?:\s[–ê-–Ø–∞-—èA-Za-z]+)?"  # –£–ª—É—á—à–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å 2 —Å–ª–æ–≤–∞ (–ò–º—è + –§–∞–º–∏–ª–∏—è)
    phone_pattern = r"\+?\d{10,15}"
    service_pattern = r"(?:–±—É–∫–µ—Ç|—Ü–≤–µ—Ç—ã|–∫–æ–º–ø–æ–∑–∏—Ü–∏—è|–ø–æ–≤–æ–¥|—Å–≤–∞–¥—å–±–∞|—é–±–∏–ª–µ–π|–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è|–ø—Ä–∞–∑–¥–Ω–∏–∫|–≥–æ–¥–æ–≤—â–∏–Ω–∞).*?"
    amount_pattern = r"(\d{3,8})\s?(?:—Ä—É–±–ª–µ–π|—Ä|‚ÇΩ)?"  # –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ + "—Ä—É–±–ª–µ–π"

    name = re.search(name_pattern, data)
    phone = re.search(phone_pattern, data)
    service = re.search(service_pattern, data, re.IGNORECASE)
    amount = re.search(amount_pattern, data)

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ: Name: {name.group(0) if name else '‚ùå'}, "
          f"Phone: {phone.group(0) if phone else '‚ùå'}, "
          f"Service: {service.group(0) if service else '‚ùå'}, "
          f"Amount: {amount.group(1) if amount else '‚ùå'}")

    return (
        name.group(0) if name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        phone.group(0) if phone else "–ù–µ —É–∫–∞–∑–∞–Ω",
        service.group(0) if service else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        int(amount.group(1)) if amount else 0
    )

# üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Airtable
def create_lead(name, phone, service, amount):
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"

    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        amount = int(amount)
    except (ValueError, TypeError):
        amount = 0  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 0

    data = {
        "fields": {
            "Name": name,
            "Phone": phone,
            "Service": service,
            "Amount of money": amount
        }
    }

    # üîç –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Airtable:")
    print(json.dumps(data, indent=4, ensure_ascii=False))

    response = requests.post(url, json=data, headers=headers)

    # üîç –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Airtable
    print("üõë –û—Ç–≤–µ—Ç –æ—Ç Airtable:", response.status_code, response.text)

    if response.status_code in [200, 201]:  
        print("‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Airtable!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {response.text}")

# üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
def create_assistant(client):
    assistant_file_path = 'assistant.json'

    if os.path.exists(assistant_file_path):
        with open(assistant_file_path, 'r') as file:
            assistant_data = json.load(file)
            assistant_id = assistant_data['assistant_id']
            print("–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
            return assistant_id

    # üÜï –°–æ–∑–¥–∞—ë–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    assistant = client.beta.assistants.create(
        instructions=assistant_instructions,
        model="gpt-4o",
        tools=[
            {"type": "file_search"},
            {"type": "code_interpreter"},
            {
                "type": "function",
                "function": {
                    "name": "create_lead",
                    "description": "–ó–∞—Ö–≤–∞—Ç –¥–µ—Ç–∞–ª–µ–π –ª–∏–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "–ò–º—è –ª–∏–¥–∞."
                            },
                            "phone": {
                                "type": "string",
                                "description": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏–¥–∞."
                            },
                            "service": {   # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º service
                                "type": "string",
                                "description": "–¢–∏–ø —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø–æ–≤–æ–¥."
                            },
                            "amount": {   # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º budget
                                "type": "integer",
                                "description": "–ë—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö."
                            }
                        },
                        "required": ["name", "phone", "service", "amount"]
                    }
                }
            }
        ]
    )

    # üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    with open(assistant_file_path, 'w') as file:
        json.dump({'assistant_id': assistant.id}, file)
        print("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ID.")

    return assistant.id
