import json
import requests
import re
import os
from openai import OpenAI
from prompts import formatter_prompt, assistant_instructions

import os

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AIRTABLE_API_KEY = os.getenv("AIRTABLE_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

if not AIRTABLE_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AIRTABLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Airtable
AIRTABLE_BASE_ID = "Untitled Base"  # –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π Base ID –∏–∑ Airtable
AIRTABLE_TABLE_NAME = "Table 1"  # –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def process_contact_data(data):
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    name_pattern = r"[–ê-–Ø–∞-—èA-Za-z]+(?:\s[–ê-–Ø–∞-—èA-Za-z]+)?"  # –ò–º—è
    phone_pattern = r"\+?\d{10,15}"  # –¢–µ–ª–µ—Ñ–æ–Ω
    service_pattern = r"(?:–±—É–∫–µ—Ç|—Ü–≤–µ—Ç—ã|–∫–æ–º–ø–æ–∑–∏—Ü–∏—è|–ø–æ–≤–æ–¥|—Å–≤–∞–¥—å–±–∞|—é–±–∏–ª–µ–π|–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è|–ø—Ä–∞–∑–¥–Ω–∏–∫|–≥–æ–¥–æ–≤—â–∏–Ω–∞).*?"  # –¢–∏–ø —É—Å–ª—É–≥–∏
    amount_pattern = r"(\d{3,8})\s?(?:—Ä—É–±–ª–µ–π|—Ä|‚ÇΩ)?"  # –ë—é–¥–∂–µ—Ç (—á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 8 —Ü–∏—Ñ—Ä —Å "—Ä—É–±–ª–µ–π")

    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    name = re.search(name_pattern, data)
    phone = re.search(phone_pattern, data)
    service = re.search(service_pattern, data, re.IGNORECASE)
    amount = re.search(amount_pattern, data)

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ: Name: {name.group(0) if name else '‚ùå'}, Phone: {phone.group(0) if phone else '‚ùå'}, Service: {service.group(0) if service else '‚ùå'}, Amount: {amount.group(1) if amount else '‚ùå'}")

    return (
        name.group(0) if name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        phone.group(0) if phone else "–ù–µ —É–∫–∞–∑–∞–Ω",
        service.group(0) if service else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        int(amount.group(1)) if amount else 0
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ –≤ Airtable
import requests
import json

def create_lead(name, phone, service, amount):
    url = "https://api.airtable.com/v0/appVoeCexAh2D0WmI/Table%201"  # –¢–≤–æ–π URL API Airtable

    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }
# ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        amount = int(amount)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∏—Å–ª–æ
    except (ValueError, TypeError):
        amount = 0  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 0

    data = {
        "fields": {  # üî¥ –£–±—Ä–∞–ª "records", —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
            "Name": name,
            "Phone": phone,
            "Service": service,
            "Amount of money": amount
        }
    }

    # –û—Ç–ª–∞–¥–∫–∞: –í—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Airtable:")
    print(json.dumps(data, indent=4, ensure_ascii=False))

    response = requests.post(url, json=data, headers=headers)

# üîç –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Airtable
    print("üõë –û—Ç–≤–µ—Ç –æ—Ç Airtable:", response.status_code, response.text)

    if response.status_code in [200, 201]:  # ‚úÖ Airtable –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 201 –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        print("‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Airtable!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {response.text}")


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
def create_assistant(client):
    assistant_file_path = 'assistant.json'

    # –ï—Å–ª–∏ —Ñ–∞–π–ª assistant.json —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: –°—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–∞—à–µ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π! –≠–¢–ò –î–û–ö–£–ú–ï–ù–¢–´ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –î–û–ë–ê–í–õ–ï–ù–´ –í Replit
    if os.path.exists(assistant_file_path):
        with open(assistant_file_path, 'r') as file:
            assistant_data = json.load(file)
            assistant_id = assistant_data['assistant_id']
            print("–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
            return assistant_id
    
    else:
        knowledge_base_files = ["VmestoSlov_bot_baze.docx"]
        file_ids = []

        for file_path in knowledge_base_files:
            
            file = client.files.create(file=open("VmestoSlov_bot_baze.docx", "rb"),
                purpose='assistants')
            file_ids.append(file.id)
            
        # –°–æ–∑–¥–∞–µ–º Vector Store –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π : –ù–∞–∑—ã–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –ª—é–±–æ–µ —Å–≤–æ–µ.
        vector_store = client.beta.vector_stores.create(
            name="Vmesto_slov_Vector_store",
            file_ids=file_ids
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ Files API: –°—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–∞—à–µ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π!
        knowledge_base_file = client.files.create(
            file=open("VmestoSlov_bot_baze.docx", "rb"),
            purpose='assistants'
        )
       
        # –ü–æ–ª—É—á–∞–µ–º file_id –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        knowledge_base_file_id = knowledge_base_file.id

        # –ó–∞–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –≤ Vector Store
        file_batch = client.beta.vector_stores.file_batches.create_and_poll(
            vector_store_id=vector_store.id,
            file_ids=[knowledge_base_file_id]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π file_id
        )

        # –°–æ–∑–¥–∞–µ–º Assistant —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Vector Store
        assistant = client.beta.assistants.create(
            instructions=assistant_instructions,
            model="gpt-4o",
            tools=[
                {
                    "type": "file_search"  # file_search –≤–º–µ—Å—Ç–æ retrieval
                },
                {
                    "type": "code_interpreter"
                },
                {
                    "type": "function",
                    "function": {
                        "name": "create_lead",
                        "description":
                        "–ó–∞—Ö–≤–∞—Ç –¥–µ—Ç–∞–ª–µ–π –ª–∏–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable.",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "–ò–º—è –ª–∏–¥–∞."
                                },
                                "phone": {
                                    "type": "string",
                                    "description": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏–¥–∞."
                                },
                                "email": {
                                    "type": "string",
                                    "description": "email –ª–∏–¥–∞."
                                }
                            },
                            "required": ["name", "phone", "email"]
                        }
                    }
                }
            ],
            tool_resources={
                "file_search": {
                    "vector_store_ids": [vector_store.id]
                }
            }
        )

        assistant = client.beta.assistants.update(
          assistant_id=assistant.id,
          tool_resources={"file_search": {"vector_store_ids": [vector_store.id]}},
        )
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ assistant.json –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö
        with open(assistant_file_path, 'w') as file:
            json.dump({'assistant_id': assistant.id}, file)
            print("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ID.")


    assistant_id = assistant.id

    return assistant_id
