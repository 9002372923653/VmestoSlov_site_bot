import json
import requests
import re
import os
import uuid
from openai import OpenAI
from prompts import formatter_prompt, assistant_instructions

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AIRTABLE_API_KEY = os.getenv("AIRTABLE_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

if not AIRTABLE_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AIRTABLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Airtable
AIRTABLE_BASE_ID = "appVoeCexAh2D0WmI"
AIRTABLE_TABLE_NAME = "Table 1"

# üîç **–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞**
def find_existing_lead(client_id, phone=None):
    """–ò—â–µ—Ç –ª–∏–¥ –≤ Airtable –ø–æ client_id –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
    headers = {"Authorization": f"Bearer {AIRTABLE_API_KEY}"}

    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        records = response.json().get("records", [])
        for record in records:
            fields = record.get("fields", {})
            if fields.get("Client ID") == client_id or (phone and fields.get("Phone") == phone):
                return record["id"]

    return None

# ‚úè **–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞**
def update_lead(record_id, fields):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ Airtable"""
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}/{record_id}"
    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }

    response = requests.patch(url, json={"fields": fields}, headers=headers)
    print(f"üõë –û—Ç–≤–µ—Ç –æ—Ç Airtable (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): {response.status_code} - {response.text}")

# ‚úÖ **–§—É–Ω–∫—Ü–∏—è `create_lead()`**
def create_lead(name, phone, service, amount, client_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–¥ –≤ Airtable"""

    if client_id is None:
        client_id = str(uuid.uuid4())[:8]

    existing_record_id = find_existing_lead(client_id, phone)

    fields = {
        "Client ID": client_id,
        "Name": name if name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else None,
        "Phone": phone if phone != "–ù–µ —É–∫–∞–∑–∞–Ω" else None,
        "Service": service if service != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else None,
        "Amount of money": amount if amount > 0 else None
    }

    fields = {k: v for k, v in fields.items() if v is not None}

    if existing_record_id:
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞: {existing_record_id}")
        update_lead(existing_record_id, fields)
    else:
        print("üì§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞ –≤ Airtable")
        url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }

        response = requests.post(url, json={"fields": fields}, headers=headers)
        print(f"üõë –û—Ç–≤–µ—Ç –æ—Ç Airtable (—Å–æ–∑–¥–∞–Ω–∏–µ): {response.status_code} - {response.text}")

    return client_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º client_id

# ‚úÖ **–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞**
def create_assistant(client):
    assistant_file_path = 'assistant.json'

    if os.path.exists(assistant_file_path):
        with open(assistant_file_path, 'r') as file:
            assistant_data = json.load(file)
            assistant_id = assistant_data['assistant_id']
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", assistant_id)
            return assistant_id

    assistant = client.beta.assistants.create(
        instructions="–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç—É –≤—ã–±—Ä–∞—Ç—å –±—É–∫–µ—Ç –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ù–µ –∑–∞–≤–µ—Ä—à–∞–π —á–∞—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!",
        model="gpt-4o",
        tools=[
            {"type": "file_search"},
            {"type": "code_interpreter"},
            {
                "type": "function",
                "function": {
                    "name": "create_lead",
                    "description": "–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Airtable.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string", "description": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞."},
                            "phone": {"type": "string", "description": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞."},
                            "service": {"type": "string", "description": "–¢–∏–ø –∑–∞–∫–∞–∑–∞ (–±—É–∫–µ—Ç, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è)."},
                            "amount": {"type": "integer", "description": "–ë—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö."}
                        },
                        "required": ["name", "phone", "service", "amount"]
                    }
                }
            }
        ]
    )

    with open(assistant_file_path, 'w') as file:
        json.dump({'assistant_id': assistant.id}, file)
        print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ID:", assistant.id)

    return assistant.id
