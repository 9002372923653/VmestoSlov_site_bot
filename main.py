import json
import os
import time
from flask import Flask, request, jsonify
import openai
from openai import OpenAI
import functions

from packaging import version

required_version = version.parse("1.1.1")
current_version = version.parse(openai.__version__)
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if current_version < required_version:
    raise ValueError(f"–û—à–∏–±–∫–∞: –≤–µ—Ä—Å–∏—è OpenAI {openai.__version__} –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ 1.1.1")
else:
    print("–í–µ—Ä—Å–∏—è OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º–∞.")

app = Flask(__name__)

client = OpenAI(api_key=OPENAI_API_KEY)
assistant_id = functions.create_assistant(client)

@app.route('/start', methods=['GET'])
def start_conversation():
    print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–µ—Å–µ–¥–∞...")
    thread = client.beta.threads.create()
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å ID: {thread.id}")
    return jsonify({"thread_id": thread.id})

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    thread_id = data.get('thread_id')
    user_input = data.get('message', '')

    if not thread_id:
        print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id")
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id"}), 400

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input} –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å ID: {thread_id}")

    client.beta.threads.messages.create(thread_id=thread_id, role="user", content=user_input)

    run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=assistant_id)

    tool_call_triggered = False  # üÜï –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è-—Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –≤—ã–∑–≤–∞–Ω –ª–∏ `create_lead`

    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)

        if run_status.status == 'completed':
            break
        elif run_status.status == 'requires_action':
            if hasattr(run_status, "required_action") and hasattr(run_status.required_action, "submit_tool_outputs"):
                tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
            else:
                tool_calls = []

            if not tool_calls:
                print("‚ö† –û—à–∏–±–∫–∞: Voiceflow –Ω–µ –ø–µ—Ä–µ–¥–∞–ª tool_calls!")
            else:
                for tool_call in tool_calls:
                    print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º tool_call: {tool_call.function.name}")
                    if tool_call.function.name == "create_lead":
                        tool_call_triggered = True  # üÜï –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ `create_lead` –±—ã–ª –≤—ã–∑–≤–∞–Ω

                        if hasattr(tool_call.function, "arguments"):
                            arguments = json.loads(tool_call.function.arguments)
                        else:
                            arguments = {}

                        print(f"üöÄ –í—ã–∑—ã–≤–∞–µ–º create_lead() —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")

                        output = functions.create_lead(
                            arguments.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"), 
                            arguments.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω"), 
                            arguments.get("service", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), 
                            arguments.get("amount", 0)
                        )

                        client.beta.threads.runs.submit_tool_outputs(thread_id=thread_id, run_id=run.id,
                                                                     tool_outputs=[{
                                                                         "tool_call_id": tool_call.id,
                                                                         "output": json.dumps(output)
                                                                     }])

            time.sleep(1)

    messages = client.beta.threads.messages.list(thread_id=thread_id)

    if messages.data:
        response_text = messages.data[0].content[0].text.value
    else:
        response_text = "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ"

    print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI: {response_text}")

    if not response_text.strip():
        response_text = "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ"

    # üÜï –ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –≤—ã–∑–≤–∞–ª `create_lead`, —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
    if not tool_call_triggered:
        print("‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –≤—ã–∑–≤–∞–ª create_lead, —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable.")

        # üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
        name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
        service = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        amount = 0

        # üÜï –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å `service` –∏ `amount` –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parsed_name, parsed_phone, parsed_service, parsed_amount = functions.process_contact_data(user_input)
        
        if parsed_service != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            service = parsed_service
        if parsed_amount > 0:
            amount = parsed_amount

        functions.create_lead(name, phone, service, amount)  # üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º –ª–∏–¥

        response_text += "\nüìå –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É, —Ñ–ª–æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."

    return jsonify({"response": response_text})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
