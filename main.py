import json
import os
import time
from flask import Flask, request, jsonify
import openai
from openai import OpenAI
import functions
from packaging import version  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ OpenAI

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏ OpenAI
required_version = version.parse("1.1.1")
current_version = version.parse(openai.__version__)

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

if current_version < required_version:
    raise ValueError(
        f"–û—à–∏–±–∫–∞: –≤–µ—Ä—Å–∏—è OpenAI {openai.__version__} –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ 1.1.1"
    )
else:
    print("‚úÖ –í–µ—Ä—Å–∏—è OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º–∞.")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__)

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
assistant_id = functions.create_assistant(client)

# üöÄ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –±–µ—Å–µ–¥—ã
@app.route('/start', methods=['GET'])
def start_conversation():
    print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–µ—Å–µ–¥–∞...")
    thread = client.beta.threads.create()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å ID: {thread.id}")
    return jsonify({"thread_id": thread.id})

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    thread_id = data.get('thread_id')
    user_input = data.get('message', '')

    if not thread_id:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id")
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id"}), 400

    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input} –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å ID: {thread_id}")

    # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
    client.beta.threads.messages.create(
        thread_id=thread_id, role="user", content=user_input
    )

    # ‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ–º–æ—â–Ω–∏–∫–∞
    run = client.beta.threads.runs.create(
        thread_id=thread_id, assistant_id=assistant_id
    )

    # ‚è± –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    while True:
        run_status = client.beta.threads.runs.retrieve(
            thread_id=thread_id, run_id=run.id
        )

        if run_status.status == 'completed':
            break

        elif run_status.status == 'requires_action':
            print("üåÄ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            tool_calls = []
            if hasattr(run_status, "required_action") and hasattr(run_status.required_action, "submit_tool_outputs"):
                tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
                print(f"üîß Tool calls: {tool_calls}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π

            if not tool_calls:
                print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Voiceflow –Ω–µ –ø–µ—Ä–µ–¥–∞–ª tool_calls!")
            else:
                for tool_call in tool_calls:
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {tool_call.function.name}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞

                    if tool_call.function.name == "create_lead":
                        print("üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π create_lead –∑–∞–ø—É—â–µ–Ω!")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
                        arguments = json.loads(tool_call.function.arguments)
                        print(f"üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è create_lead: {arguments}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

                        output = functions.create_lead(
                            arguments.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                            arguments.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                            arguments.get("service", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                            arguments.get("amount", 0)
                        )

                        client.beta.threads.runs.submit_tool_outputs(
                            thread_id=thread_id,
                            run_id=run.id,
                            tool_outputs=[{
                                "tool_call_id": tool_call.id,
                                "output": json.dumps(output)
                            }]
                        )

        time.sleep(1)  # üí§ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    # üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞
    messages = client.beta.threads.messages.list(thread_id=thread_id)
    response_text = messages.data[0].content[0].text.value if messages.data else "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ"

    print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {response_text}")
    return jsonify({"response": response_text})

# üöÄ –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
