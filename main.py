import json
import os
import time
from flask import Flask, request, jsonify
import openai
from openai import OpenAI
import functions

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ OpenAI
from packaging import version

required_version = version.parse("1.1.1")
current_version = version.parse(openai.__version__)
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if current_version < required_version:
    raise ValueError(
        f"–û—à–∏–±–∫–∞: –≤–µ—Ä—Å–∏—è OpenAI {openai.__version__} –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ 1.1.1"
    )
else:
    print("–í–µ—Ä—Å–∏—è OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º–∞.")

# –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞
assistant_id = functions.create_assistant(client)  # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ "functions.py"

# –ù–∞—á–∞—Ç—å –ø–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã
@app.route('/start', methods=['GET'])
def start_conversation():
    print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–µ—Å–µ–¥–∞...")
    thread = client.beta.threads.create()
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å ID: {thread.id}")
    return jsonify({"thread_id": thread.id})

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    thread_id = data.get('thread_id')
    user_input = data.get('message', '')

    if not thread_id:
        print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id")
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id"}), 400

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input} –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å ID: {thread_id}")

    # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
    client.beta.threads.messages.create(thread_id=thread_id,
                                         role="user",
                                         content=user_input)

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞
    run = client.beta.threads.runs.create(thread_id=thread_id,
                                           assistant_id=assistant_id)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç Run (–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏)
    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread_id,
                                                        run_id=run.id)
        if run_status.status == 'completed':
            break
        elif run_status.status == 'requires_action':
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            for tool_call in run_status.required_action.submit_tool_outputs.tool_calls:
                if tool_call.function.name == "create_lead":
                    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    arguments = json.loads(tool_call.function.arguments)
                    print(f"üöÄ –í—ã–∑—ã–≤–∞–µ–º create_lead() —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")  # –û—Ç–ª–∞–¥–∫–∞
                    
                    output = functions.create_lead(
    arguments.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"), 
    arguments.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω"), 
    arguments.get("service", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), 
    arguments.get("amount", 0)
)
                    client.beta.threads.runs.submit_tool_outputs(thread_id=thread_id,
                                                                run_id=run.id,
                                                                tool_outputs=[{
                                                                    "tool_call_id":
                                                                    tool_call.id,
                                                                    "output":
                                                                    json.dumps(output)
                                                                }])
            time.sleep(1)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    # –ü–æ–ª—É—á–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞
    messages = client.beta.threads.messages.list(thread_id=thread_id)
    response_text = messages.data[0].content[0].text.value

    print(f"–û—Ç–≤–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞: {response_text}")
    return jsonify({"response": response_text})


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
